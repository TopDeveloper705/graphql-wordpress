type InlineStyleRange {
  offset: Int
  length: Int
  style: String
}

input InlineStyleRangeInput {
  offset: Int
  length: Int
  style: String
}

type EntityRange {
  offset: Int
  length: Int
  key: Int
}

input EntityRangeInput {
  offset: Int
  length: Int
  key: Int
}

type Data {
  id: String
}

input DataInput {
  id: String
}

type Block {
  key: String
  text: String
  type: String
  depth: Int
  inlineStyleRanges: [InlineStyleRange]
  entityRanges: [EntityRange]
  data: Data
}

input BlockInput {
  key: String
  text: String
  type: String
  depth: Int
  inlineStyleRanges: [InlineStyleRangeInput]
  entityRanges: [EntityRangeInput]
  data: DataInput
}

type LinkData {
  type: String
  href: String
  target: String
}

type EmbedData {
  type: String
  url: String
  html: String
}

type ImageData {
  type: String
  id: ObjID
  image: ImageUpload
  size: String
}

type VideoData {
  type: String
  id: ObjID
  video: Video
}

union EntityData = LinkData | EmbedData | ImageData | VideoData

input EntityDataInput {
  type: String!
  # EMBED fields
  url: String
  html: String
  # LINK fields
  href: String
  target: String
  # IMAGE fields
  id: String
  size: String
}

enum EntityType {
  LINK
  TOKEN
  PHOTO
  IMAGE
  EMBED
  VIDEO
}

enum EntityMutability {
  MUTABLE
  IMMUTABLE
  SEGMENTED
}

type Entity {
  type: EntityType
  mutability: EntityMutability
  data: EntityData
}

input EntityInput {
  type: EntityType
  mutability: EntityMutability
  data: EntityDataInput
}

type ContentState {
  blocks: [Block]
  entityMap: [Entity]
}

input ContentStateInput {
  blocks: [BlockInput]
  entityMap: [EntityInput]
}
